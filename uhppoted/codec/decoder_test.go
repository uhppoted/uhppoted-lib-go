// generated code - ** DO NOT EDIT **

package codec

import (
	"net/netip"
	"reflect"
	"testing"

	"github.com/uhppoted/uhppoted-lib-go/uhppoted/entities"
	"github.com/uhppoted/uhppoted-lib-go/uhppoted/responses"
)

func TestDecodeGetControllerResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x94, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0xff, 0xff, 0xff, 0x00,
		0xc0, 0xa8, 0x01, 0x01, 0x00, 0x12, 0x23, 0x34, 0x45, 0x56, 0x08, 0x92, 0x20, 0x18, 0x11, 0x05,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.GetControllerResponse{
		Controller: 405419896,
		IpAddress:  netip.MustParseAddr("192.168.1.100"),
		SubnetMask: netip.MustParseAddr("255.255.255.0"),
		Gateway:    netip.MustParseAddr("192.168.1.1"),
		MACAddress: "00:12:23:34:45:56",
		Version:    "v8.92",
		Date:       entities.MustParseDate("2018-11-05"),
	}

	if response, err := Decode[responses.GetControllerResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeSetIPv4Response(t *testing.T) {
	packet := []byte{
		0x17, 0x96, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.SetIPv4Response{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.SetIPv4Response](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeGetStatusResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x20, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x4e, 0x00, 0x00, 0x00, 0x02, 0x01, 0x03, 0x01,
		0xa1, 0x98, 0x7c, 0x00, 0x20, 0x22, 0x08, 0x23, 0x09, 0x47, 0x06, 0x2c, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x03, 0x09, 0x49, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x27, 0x07, 0x09, 0x22, 0x08, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.GetStatusResponse{
		Controller:         405419896,
		SystemDate:         entities.MustParseDate("2022-08-23"),
		SystemTime:         entities.MustParseTime("09:49:39"),
		Door1Open:          false,
		Door2Open:          true,
		Door3Open:          false,
		Door4Open:          false,
		Door1Button:        false,
		Door2Button:        false,
		Door3Button:        false,
		Door4Button:        true,
		Relays:             7,
		Inputs:             9,
		SystemError:        3,
		SpecialInfo:        39,
		EventIndex:         78,
		EventType:          2,
		EventAccessGranted: true,
		EventDoor:          3,
		EventDirection:     1,
		EventCard:          8165537,
		EventTimestamp:     entities.MustParseDateTime("2022-08-23 09:47:06"),
		EventReason:        44,
		SequenceNo:         0,
	}

	if response, err := Decode[responses.GetStatusResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeGetTimeResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x32, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x20, 0x25, 0x11, 0x01, 0x12, 0x34, 0x56, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.GetTimeResponse{
		Controller: 405419896,
		DateTime:   entities.MustParseDateTime("2025-11-01 12:34:56"),
	}

	if response, err := Decode[responses.GetTimeResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeSetTimeResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x30, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x20, 0x25, 0x11, 0x01, 0x12, 0x34, 0x56, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.SetTimeResponse{
		Controller: 405419896,
		DateTime:   entities.MustParseDateTime("2025-11-01 12:34:56"),
	}

	if response, err := Decode[responses.SetTimeResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeGetListenerResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x92, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0x61, 0xea, 0x11, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.GetListenerResponse{
		Controller: 405419896,
		Address:    netip.MustParseAddr("192.168.1.100"),
		Port:       60001,
		Interval:   17,
	}

	if response, err := Decode[responses.GetListenerResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeSetListenerResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x90, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.SetListenerResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.SetListenerResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeGetListenerAddressPortResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x92, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0x61, 0xea, 0x11, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.GetListenerAddrPortResponse{
		Controller: 405419896,
		Listener:   netip.MustParseAddrPort("192.168.1.100:60001"),
		Interval:   17,
	}

	if response, err := Decode[responses.GetListenerAddrPortResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeSetListenerAddressPortResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x90, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.SetListenerAddrPortResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.SetListenerAddrPortResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeGetDoorResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x82, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.GetDoorResponse{
		Controller: 405419896,
		Door:       3,
		Mode:       2,
		Delay:      7,
	}

	if response, err := Decode[responses.GetDoorResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeSetDoorResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x80, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.SetDoorResponse{
		Controller: 405419896,
		Door:       3,
		Mode:       2,
		Delay:      7,
	}

	if response, err := Decode[responses.SetDoorResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeSetDoorPasscodesResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x8c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.SetDoorPasscodesResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.SetDoorPasscodesResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeOpenDoorResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x40, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.OpenDoorResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.OpenDoorResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeGetCardsResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x58, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x0b, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.GetCardsResponse{
		Controller: 405419896,
		Cards:      13579,
	}

	if response, err := Decode[responses.GetCardsResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeGetCardResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x5a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa0, 0x7a, 0x99, 0x00, 0x20, 0x24, 0x01, 0x01,
		0x20, 0x24, 0x12, 0x31, 0x01, 0x00, 0x11, 0x01, 0x3f, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.GetCardResponse{
		Controller: 405419896,
		Card:       10058400,
		StartDate:  entities.MustParseDate("2024-01-01"),
		EndDate:    entities.MustParseDate("2024-12-31"),
		Door1:      1,
		Door2:      0,
		Door3:      17,
		Door4:      1,
		PIN:        999999,
	}

	if response, err := Decode[responses.GetCardResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeGetCardNotFoundResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x5a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.GetCardResponse{
		Controller: 405419896,
		Card:       0,
		StartDate:  entities.MustParseDate("0001-01-01"),
		EndDate:    entities.MustParseDate("0001-01-01"),
		Door1:      0,
		Door2:      0,
		Door3:      0,
		Door4:      0,
		PIN:        0,
	}

	if response, err := Decode[responses.GetCardResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeGetCardAtIndexResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x5c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa0, 0x7a, 0x99, 0x00, 0x20, 0x24, 0x01, 0x01,
		0x20, 0x24, 0x12, 0x31, 0x01, 0x00, 0x11, 0x01, 0x3f, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.GetCardAtIndexResponse{
		Controller: 405419896,
		Card:       10058400,
		StartDate:  entities.MustParseDate("2024-01-01"),
		EndDate:    entities.MustParseDate("2024-12-31"),
		Door1:      1,
		Door2:      0,
		Door3:      17,
		Door4:      1,
		PIN:        999999,
	}

	if response, err := Decode[responses.GetCardAtIndexResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodePutCardResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x50, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.PutCardResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.PutCardResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeDeleteCardResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x52, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.DeleteCardResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.DeleteCardResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeDeleteAllCardsResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x54, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.DeleteAllCardsResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.DeleteAllCardsResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeGetEventResponse(t *testing.T) {
	packet := []byte{
		0x17, 0xb0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x0b, 0x35, 0x00, 0x00, 0x02, 0x01, 0x04, 0x02,
		0xa0, 0x7a, 0x99, 0x00, 0x20, 0x25, 0x11, 0x17, 0x12, 0x34, 0x56, 0x15, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.GetEventResponse{
		Controller:    405419896,
		Index:         13579,
		EventType:     2,
		AccessGranted: true,
		Door:          4,
		Direction:     2,
		Card:          10058400,
		Timestamp:     entities.MustParseDateTime("2025-11-17 12:34:56"),
		Reason:        21,
	}

	if response, err := Decode[responses.GetEventResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeGetEventNotFoundResponse(t *testing.T) {
	packet := []byte{
		0x17, 0xb0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x68, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.GetEventResponse{
		Controller:    405419896,
		Index:         24680,
		EventType:     0,
		AccessGranted: false,
		Door:          0,
		Direction:     0,
		Card:          0,
		Timestamp:     entities.MustParseDateTime("0001-01-01 00:00:00"),
		Reason:        0,
	}

	if response, err := Decode[responses.GetEventResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeGetEventOverwrittenResponse(t *testing.T) {
	packet := []byte{
		0x17, 0xb0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xcd, 0x81, 0x01, 0x00, 0xff, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.GetEventResponse{
		Controller:    405419896,
		Index:         98765,
		EventType:     255,
		AccessGranted: false,
		Door:          0,
		Direction:     0,
		Card:          0,
		Timestamp:     entities.MustParseDateTime("0001-01-01 00:00:00"),
		Reason:        0,
	}

	if response, err := Decode[responses.GetEventResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeGetEventIndexResponse(t *testing.T) {
	packet := []byte{
		0x17, 0xb4, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x0b, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.GetEventIndexResponse{
		Controller: 405419896,
		Index:      13579,
	}

	if response, err := Decode[responses.GetEventIndexResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeSetEventIndexResponse(t *testing.T) {
	packet := []byte{
		0x17, 0xb2, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.SetEventIndexResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.SetEventIndexResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeRecordSpecialEventsResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x8e, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.RecordSpecialEventsResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.RecordSpecialEventsResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeGetTimeProfileResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x98, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x25, 0x20, 0x25, 0x11, 0x26, 0x20, 0x25, 0x12,
		0x29, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x08, 0x30, 0x09, 0x45, 0x11, 0x35, 0x13, 0x15,
		0x14, 0x01, 0x17, 0x59, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.GetTimeProfileResponse{
		Controller:    405419896,
		Profile:       37,
		StartDate:     entities.MustParseDate("2025-11-26"),
		EndDate:       entities.MustParseDate("2025-12-29"),
		Monday:        true,
		Tuesday:       true,
		Wednesday:     false,
		Thursday:      true,
		Friday:        false,
		Saturday:      true,
		Sunday:        true,
		Segment1Start: entities.MustParseHHmm("08:30"),
		Segment1End:   entities.MustParseHHmm("09:45"),
		Segment2Start: entities.MustParseHHmm("11:35"),
		Segment2End:   entities.MustParseHHmm("13:15"),
		Segment3Start: entities.MustParseHHmm("14:01"),
		Segment3End:   entities.MustParseHHmm("17:59"),
		LinkedProfile: 19,
	}

	if response, err := Decode[responses.GetTimeProfileResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeSetTimeProfileResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x88, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.SetTimeProfileResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.SetTimeProfileResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeClearTimeProfilesResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x8a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.ClearTimeProfilesResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.ClearTimeProfilesResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeAddTaskResponse(t *testing.T) {
	packet := []byte{
		0x17, 0xa8, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.AddTaskResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.AddTaskResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeRefreshTasklistResponse(t *testing.T) {
	packet := []byte{
		0x17, 0xac, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.RefreshTaskListResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.RefreshTaskListResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeClearTasklistResponse(t *testing.T) {
	packet := []byte{
		0x17, 0xa6, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.ClearTaskListResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.ClearTaskListResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeSetPcControlResponse(t *testing.T) {
	packet := []byte{
		0x17, 0xa0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.SetPCControlResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.SetPCControlResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeSetInterlockResponse(t *testing.T) {
	packet := []byte{
		0x17, 0xa2, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.SetInterlockResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.SetInterlockResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeActivateKeypadsResponse(t *testing.T) {
	packet := []byte{
		0x17, 0xa4, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.ActivateKeypadsResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.ActivateKeypadsResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeGetAntiPassbackResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x86, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.GetAntiPassbackResponse{
		Controller:   405419896,
		Antipassback: 2,
	}

	if response, err := Decode[responses.GetAntiPassbackResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeSetAntipassbackResponse(t *testing.T) {
	packet := []byte{
		0x17, 0x84, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.SetAntiPassbackResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.SetAntiPassbackResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}

func TestDecodeRestoreDefaultParametersResponse(t *testing.T) {
	packet := []byte{
		0x17, 0xc8, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := responses.RestoreDefaultParametersResponse{
		Controller: 405419896,
		Ok:         true,
	}

	if response, err := Decode[responses.RestoreDefaultParametersResponse](packet); err != nil {
		t.Fatalf("%v", err)
	} else if !reflect.DeepEqual(response, expected) {
		t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected, response)
	}
}
