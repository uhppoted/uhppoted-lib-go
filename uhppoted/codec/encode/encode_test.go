// generated code - ** DO NOT EDIT **

package encode

import (
	"fmt"
	"net/netip"
	"slices"
	"testing"
	"time"
)

func TestFindControllers(t *testing.T) {
	expected := []byte{
		0x17, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetControllerRequest(uint32(0))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get controller request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetController(t *testing.T) {
	expected := []byte{
		0x17, 0x94, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetControllerRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get controller request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestSetIPv4(t *testing.T) {
	expected := []byte{
		0x17, 0x96, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x7d, 0xff, 0xff, 0xff, 0x00,
		0xc0, 0xa8, 0x01, 0x01, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := SetIPv4Request(uint32(405419896), netip.MustParseAddr("192.168.1.125"), netip.MustParseAddr("255.255.255.0"), netip.MustParseAddr("192.168.1.1"))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("set IPv4 request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetStatus(t *testing.T) {
	expected := []byte{
		0x17, 0x20, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetStatusRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get status request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetTime(t *testing.T) {
	expected := []byte{
		0x17, 0x32, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetTimeRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get time request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestSetTime(t *testing.T) {
	expected := []byte{
		0x17, 0x30, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x20, 0x24, 0x11, 0x04, 0x12, 0x34, 0x56, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := SetTimeRequest(uint32(405419896), string2datetime("2024-11-04 12:34:56"))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("set time request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetListener(t *testing.T) {
	expected := []byte{
		0x17, 0x92, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetListenerRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get listener request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestSetListener(t *testing.T) {
	expected := []byte{
		0x17, 0x90, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0x61, 0xea, 0x11, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := SetListenerRequest(uint32(405419896), netip.MustParseAddrPort("192.168.1.100:60001"), uint8(17))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("set listener request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetDoor(t *testing.T) {
	expected := []byte{
		0x17, 0x82, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetDoorRequest(uint32(405419896), uint8(3))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get door request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestSetDoor(t *testing.T) {
	expected := []byte{
		0x17, 0x80, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x02, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := SetDoorRequest(uint32(405419896), uint8(3), uint8(2), uint8(17))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("set door request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestSetDoorPasscodes(t *testing.T) {
	expected := []byte{
		0x17, 0x8c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x39, 0x30, 0x00, 0x00,
		0x31, 0xd4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := SetDoorPasscodesRequest(uint32(405419896), uint8(3), uint32(12345), uint32(54321), uint32(0), uint32(999999))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("set door passcodes request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestOpenDoor(t *testing.T) {
	expected := []byte{
		0x17, 0x40, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := OpenDoorRequest(uint32(405419896), uint8(3))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("open door request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetCards(t *testing.T) {
	expected := []byte{
		0x17, 0x58, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetCardsRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get cards request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetCard(t *testing.T) {
	expected := []byte{
		0x17, 0x5a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa0, 0x7a, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetCardRequest(uint32(405419896), uint32(10058400))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get card request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestPutCard(t *testing.T) {
	expected := []byte{
		0x17, 0x50, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa0, 0x7a, 0x99, 0x00, 0x20, 0x25, 0x01, 0x01,
		0x20, 0x25, 0x12, 0x31, 0x01, 0x00, 0x11, 0x01, 0x3f, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := PutCardRequest(uint32(405419896), uint32(10058400), string2date("2025-01-01"), string2date("2025-12-31"), uint8(1), uint8(0), uint8(17), uint8(1), uint32(999999))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("put card request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}
func string2datetime(v string) time.Time {
	if d, err := time.ParseInLocation("2006-01-02 15:04:05", v, time.Local); err != nil {
		panic(fmt.Sprintf("invalid datetime (%v)", v))
	} else {
		return d
	}
}

func string2date(v string) time.Time {
	if d, err := time.ParseInLocation("2006-01-02", v, time.Local); err != nil {
		panic(fmt.Sprintf("invalid date (%v)", v))
	} else {
		return d
	}
}
