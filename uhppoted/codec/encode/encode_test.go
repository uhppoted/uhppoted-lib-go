// generated code - ** DO NOT EDIT **

package encode

import (
	"net/netip"
	"slices"
	"testing"

	"github.com/uhppoted/uhppoted-lib-go/uhppoted/entities"
)

func TestFindControllers(t *testing.T) {
	expected := []byte{
		0x17, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetControllerRequest(uint32(0))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get controller request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetController(t *testing.T) {
	expected := []byte{
		0x17, 0x94, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetControllerRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get controller request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestSetIPv4(t *testing.T) {
	expected := []byte{
		0x17, 0x96, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x7d, 0xff, 0xff, 0xff, 0x00,
		0xc0, 0xa8, 0x01, 0x01, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := SetIPv4Request(uint32(405419896), netip.MustParseAddr("192.168.1.125"), netip.MustParseAddr("255.255.255.0"), netip.MustParseAddr("192.168.1.1"))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("set IPv4 request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetStatus(t *testing.T) {
	expected := []byte{
		0x17, 0x20, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetStatusRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get status request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetTime(t *testing.T) {
	expected := []byte{
		0x17, 0x32, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetTimeRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get time request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestSetTime(t *testing.T) {
	expected := []byte{
		0x17, 0x30, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x20, 0x25, 0x11, 0x04, 0x12, 0x34, 0x56, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := SetTimeRequest(uint32(405419896), entities.MustParseDateTime("2025-11-04 12:34:56"))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("set time request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetListener(t *testing.T) {
	expected := []byte{
		0x17, 0x92, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetListenerRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get listener request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestSetListener(t *testing.T) {
	expected := []byte{
		0x17, 0x90, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0x61, 0xea, 0x11, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := SetListenerRequest(uint32(405419896), netip.MustParseAddr("192.168.1.100"), uint16(60001), uint8(17))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("set listener request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetListenerAddrPort(t *testing.T) {
	expected := []byte{
		0x17, 0x92, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetListenerAddrPortRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get listener addr port request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestSetListenerAddrport(t *testing.T) {
	expected := []byte{
		0x17, 0x90, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0x61, 0xea, 0x11, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := SetListenerAddrPortRequest(uint32(405419896), netip.MustParseAddrPort("192.168.1.100:60001"), uint8(17))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("set listener addr:port request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetDoor(t *testing.T) {
	expected := []byte{
		0x17, 0x82, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetDoorRequest(uint32(405419896), uint8(3))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get door request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestSetDoor(t *testing.T) {
	expected := []byte{
		0x17, 0x80, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x02, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := SetDoorRequest(uint32(405419896), uint8(3), uint8(2), uint8(17))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("set door request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestSetDoorPasscodes(t *testing.T) {
	expected := []byte{
		0x17, 0x8c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x40, 0xe2, 0x01, 0x00,
		0x47, 0x94, 0x03, 0x00, 0x4e, 0x46, 0x05, 0x00, 0x55, 0xf8, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := SetDoorPasscodesRequest(uint32(405419896), uint8(3), uint32(123456), uint32(234567), uint32(345678), uint32(456789))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("set door passcodes request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestSetDoorPasscodesWithInvalidPasscode(t *testing.T) {
	expected := []byte{
		0x17, 0x8c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x40, 0xe2, 0x01, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x4e, 0x46, 0x05, 0x00, 0x55, 0xf8, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := SetDoorPasscodesRequest(uint32(405419896), uint8(3), uint32(123456), uint32(1234567), uint32(345678), uint32(456789))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("set door passcodes request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestOpenDoor(t *testing.T) {
	expected := []byte{
		0x17, 0x40, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := OpenDoorRequest(uint32(405419896), uint8(3))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("open door request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetCards(t *testing.T) {
	expected := []byte{
		0x17, 0x58, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetCardsRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get cards request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetCard(t *testing.T) {
	expected := []byte{
		0x17, 0x5a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa0, 0x7a, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetCardRequest(uint32(405419896), uint32(10058400))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get card request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetCardAtIndex(t *testing.T) {
	expected := []byte{
		0x17, 0x5c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetCardAtIndexRequest(uint32(405419896), uint32(135))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get card at index request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestPutCard(t *testing.T) {
	expected := []byte{
		0x17, 0x50, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa0, 0x7a, 0x99, 0x00, 0x20, 0x25, 0x01, 0x01,
		0x20, 0x25, 0x12, 0x31, 0x01, 0x00, 0x11, 0x01, 0x3f, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := PutCardRequest(uint32(405419896), uint32(10058400), entities.MustParseDate("2025-01-01"), entities.MustParseDate("2025-12-31"), uint8(1), uint8(0), uint8(17), uint8(1), uint32(999999))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("put card request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestDeleteCard(t *testing.T) {
	expected := []byte{
		0x17, 0x52, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa0, 0x7a, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := DeleteCardRequest(uint32(405419896), uint32(10058400))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("delete card request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestDeleteAllCards(t *testing.T) {
	expected := []byte{
		0x17, 0x54, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := DeleteCardsRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("delete cards request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetEvent(t *testing.T) {
	expected := []byte{
		0x17, 0xb0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x0b, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetEventRequest(uint32(405419896), uint32(13579))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get event request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetEventIndex(t *testing.T) {
	expected := []byte{
		0x17, 0xb4, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetEventIndexRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get event index request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestSetEventIndexRequest(t *testing.T) {
	expected := []byte{
		0x17, 0xb2, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x0b, 0x35, 0x00, 0x00, 0x55, 0xaa, 0xaa, 0x55,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := SetEventIndexRequest(uint32(405419896), uint32(13579))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("set event index request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestRecordSpecialEventsRequest(t *testing.T) {
	expected := []byte{
		0x17, 0x8e, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := RecordSpecialEventsRequest(uint32(405419896), true)

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("record special events request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetTimeProfile(t *testing.T) {
	expected := []byte{
		0x17, 0x98, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetTimeProfileRequest(uint32(405419896), uint8(37))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get time profile request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestSetTimeProfile(t *testing.T) {
	expected := []byte{
		0x17, 0x88, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x25, 0x20, 0x25, 0x11, 0x26, 0x20, 0x25, 0x12,
		0x29, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x08, 0x30, 0x09, 0x45, 0x11, 0x35, 0x13, 0x15,
		0x14, 0x01, 0x17, 0x59, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := SetTimeProfileRequest(uint32(405419896), uint8(37), entities.MustParseDate("2025-11-26"), entities.MustParseDate("2025-12-29"), true, true, false, true, false, true, true, entities.MustParseHHmm("8:30"), entities.MustParseHHmm("9:45"), entities.MustParseHHmm("11:35"), entities.MustParseHHmm("13:15"), entities.MustParseHHmm("14:01"), entities.MustParseHHmm("17:59"), uint8(19))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("set time profile request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestClearTimeProfiles(t *testing.T) {
	expected := []byte{
		0x17, 0x8a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := ClearTimeProfilesRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("clear time profiles request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestAddTask(t *testing.T) {
	expected := []byte{
		0x17, 0xa8, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x20, 0x25, 0x01, 0x01, 0x20, 0x25, 0x12, 0x31,
		0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x08, 0x45, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := AddTaskRequest(uint32(405419896), uint8(2), entities.MustParseDate("2025-01-01"), entities.MustParseDate("2025-12-31"), true, true, false, true, false, true, true, entities.MustParseHHmm("08:45"), uint8(3), uint8(7))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("add task request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestRefreshTaskList(t *testing.T) {
	expected := []byte{
		0x17, 0xac, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := RefreshTaskListRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("refresh task list request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestClearTaskList(t *testing.T) {
	expected := []byte{
		0x17, 0xa6, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := ClearTasklistRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("clear tasklist request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestSetPcControlRequest(t *testing.T) {
	expected := []byte{
		0x17, 0xa0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x55, 0xaa, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := SetPCControlRequest(uint32(405419896), true)

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("set PC control request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestSetInterlockRequest(t *testing.T) {
	expected := []byte{
		0x17, 0xa2, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := SetInterlockRequest(uint32(405419896), uint8(8))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("set interlock request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestActivateKeypads(t *testing.T) {
	expected := []byte{
		0x17, 0xa4, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := ActivateKeypadsRequest(uint32(405419896), true, true, false, true)

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("activate keypads request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestGetAntipassack(t *testing.T) {
	expected := []byte{
		0x17, 0x86, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := GetAntipassbackRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("get antipassback request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestSetAntipassack(t *testing.T) {
	expected := []byte{
		0x17, 0x84, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := SetAntipassbackRequest(uint32(405419896), uint8(2))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("set antipassback request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}

func TestRestoreDefaultParameters(t *testing.T) {
	expected := []byte{
		0x17, 0xc8, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	packet, err := RestoreDefaultParametersRequest(uint32(405419896))

	if err != nil {
		t.Fatalf("%v", err)
	} else if !slices.Equal(packet, expected) {
		t.Errorf("restore default parameters request: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)
	}
}
