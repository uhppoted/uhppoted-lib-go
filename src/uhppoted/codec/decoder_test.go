package codec

import (
	"errors"
	"testing"

	"github.com/uhppoted/uhppoted-lib-go/uhppoted/responses"
)

func TestInvalidPacket(t *testing.T) {
	packet := []byte{}
	expected := errors.New("invalid reply packet length (0)")

	if _, err := Decode[responses.GetControllerResponse](packet); err == nil {
		t.Errorf("expected error '...', got:      %#v", err)
	} else if err.Error() != expected.Error() {
		t.Errorf("incorrect error - expected:%#v, got:%#v", expected, err)
	}
}

func TestInvalidSOM(t *testing.T) {
	packet := []byte{
		0x16, 0x94, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0xff, 0xff, 0xff, 0x00,
		0xc0, 0xa8, 0x01, 0x01, 0x00, 0x12, 0x23, 0x34, 0x45, 0x56, 0x08, 0x92, 0x20, 0x18, 0x11, 0x05,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := errors.New("invalid reply SOM byte (0x16)")

	if _, err := Decode[responses.GetControllerResponse](packet); err == nil {
		t.Errorf("expected error '...', got:      %#v", err)
	} else if err.Error() != expected.Error() {
		t.Errorf("incorrect error - expected:%#v, got:%#v", expected, err)
	}
}

func TestInvalidMsgType(t *testing.T) {
	packet := []byte{
		0x17, 0x00, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0xff, 0xff, 0xff, 0x00,
		0xc0, 0xa8, 0x01, 0x01, 0x00, 0x12, 0x23, 0x34, 0x45, 0x56, 0x08, 0x92, 0x20, 0x18, 0x11, 0x05,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := errors.New("unknown message type (0x00)")

	if _, err := Decode[responses.GetControllerResponse](packet); err == nil {
		t.Errorf("expected error '...', got:      %#v", err)
	} else if err.Error() != expected.Error() {
		t.Errorf("incorrect error - expected:%#v, got:%#v", expected, err)
	}
}
