package uhppoted

import (
    "fmt"
    "net/netip"
    "time"

    lib "github.com/uhppoted/uhppoted-lib-go/uhppoted"
)

var Expected = struct { 
    FindControllers []lib.GetControllerResponse
{{- range $i,$func := . }}{{ if $i }}
    {{ titleCase $func.Name }} lib.{{ titleCase $func.Response.Name }}Response{{ end }}{{ end }}
}{ 
    FindControllers: []lib.GetControllerResponse{
        lib.GetControllerResponse{
            Controller: 201020304,
            IpAddress:  netip.MustParseAddr("192.168.1.101"),
            SubnetMask: netip.MustParseAddr("255.255.255.0"),
            Gateway:    netip.MustParseAddr("192.168.1.1"),
            MACAddress: "52:fd:fc:07:21:82",
            Version:    "v6.62",
            Date:       time.Date(2020, 1, 1, 0, 0, 0, 0, time.Local),
        },
        lib.GetControllerResponse{
            Controller: 303986753,
            IpAddress:  netip.MustParseAddr("192.168.1.100"),
            SubnetMask: netip.MustParseAddr("255.255.255.0"),
            Gateway:    netip.MustParseAddr("192.168.1.1"),
            MACAddress: "52:fd:fc:07:21:82",
            Version:    "v8.92",
            Date:       time.Date(2019, 8, 15, 0, 0, 0, 0, time.Local),
        },
        lib.GetControllerResponse{
            Controller: 405419896,
            IpAddress:  netip.MustParseAddr("192.168.1.100"),
            SubnetMask: netip.MustParseAddr("255.255.255.0"),
            Gateway:    netip.MustParseAddr("192.168.1.1"),
            MACAddress: "00:12:23:34:45:56",
            Version:    "v8.92",
            Date:       time.Date(2018, 11, 5, 0, 0, 0, 0, time.Local),
        },
    },
{{ range $i,$func := . }}{{ if $i }}
    {{ titleCase $func.Name }}: lib.{{ titleCase $func.Response.Name }}Response { {{- range $i,$reply := $func.Test.Replies }}
{{- range $value := $reply.Response}}
        {{ titleCase $value.Name }}: {{ value $value.Value $value.Type }},
{{- end }}
{{ break }}
{{ end }}     },
{{ end }}{{ end }}
}

func IPv4(v string) netip.Addr {
    return netip.MustParseAddr(v)
}

func addrport(v string) netip.AddrPort {
    return netip.MustParseAddrPort(v)
}

func string2datetime(v string) time.Time {
    if d, err := time.ParseInLocation("2006-01-02 15:04:05", v, time.Local); err != nil {
        panic(fmt.Sprintf("invalid datetime (%v)", v))
    } else {
        return d
    }
}

func string2date(v string) time.Time {
    if d, err := time.ParseInLocation("2006-01-02", v, time.Local); err != nil {
        panic(fmt.Sprintf("invalid date (%v)", v))
    } else {
        return d
    }
}

func string2time(v string) time.Time {
    if d, err := time.ParseInLocation("15:04:05", v, time.Local); err != nil {
        panic(fmt.Sprintf("invalid time (%v)", v))
    } else {
        return d
    }
}
