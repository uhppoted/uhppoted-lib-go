// generated code - ** DO NOT EDIT **

package decode

import (
    "fmt"

    "github.com/uhppoted/uhppoted-lib-go/uhppoted/responses"
)

{{ range $response := . }}
// Decodes a {{ hyphenate $response.Message.Name }} response.
//
//  Parameters:
//      packet  (bytearray)  64 byte UDP packet.
//
//  Returns:
//      - {{ titleCase $response.Message.Name }} initialised from the UDP packet.
//      - error if the packet is not 64 bytes, has an invalid start-of-message byte or has
//                 the incorrect message type.
func {{ titleCase $response.Message.Name }}(packet []byte) (responses.{{ titleCase $response.Message.Name }}, error) {
    if len(packet) != 64 {
        return responses.{{ titleCase $response.Message.Name }}{}, fmt.Errorf("invalid reply packet length (%v)", len(packet))
    }

    // Ref. v6.62 firmware event
    if packet[0] != SOM && (packet[0] != SOM_v6_62 || packet[1] != 0x20) {
        return responses.{{ titleCase $response.Message.Name }}{}, fmt.Errorf("invalid reply start of message byte (%02x)", packet[0])
    }

    if packet[1] != {{ $response.Message.MsgType }} {
        return responses.{{ titleCase $response.Message.Name }}{}, fmt.Errorf("invalid reply function code (%02x)", packet[1])
    }

    return responses.{{ titleCase $response.Message.Name }}{
{{- range $i,$field := $response.Message.Fields }}
        {{ titleCase $field.Name }}: {{ unpack $field }},{{ end }}
    }, nil
}
{{ end -}}