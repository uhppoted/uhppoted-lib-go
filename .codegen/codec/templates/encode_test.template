// generated code - ** DO NOT EDIT **

package encode

import (
   "fmt"
   "net/netip"
   "slices"
   "testing"
   "time"

   "github.com/uhppoted/uhppoted-lib-go/uhppoted/entities"
)

{{ range $rq := . }}
{{ range $test := $rq.Tests}}
func Test{{ titleCase $test.Name }}(t *testing.T) {
    expected := []byte{
{{ hex $test.Expected }}
    }

    packet,err := {{ titleCase $rq.Name }}({{- testargs $test.Args -}})

    if err != nil {
        t.Fatalf("%v",err)
    } else if !slices.Equal(packet, expected) {
        t.Errorf("{{ $rq.Name }}: incorrectly encoded request\n   expected:%v\n   got:     %v", expected, packet)        
    }
}
{{ end -}}
{{ end -}}

func string2date(v string) time.Time {
    if d,err := time.ParseInLocation("2006-01-02", v, time.Local); err != nil {
        panic(fmt.Sprintf("invalid date (%v)", v))
    } else {
        return d
    }
}

func string2HHmm(v string) time.Time {
    if t,err := time.ParseInLocation("15:04", v, time.Local); err != nil {
        panic(fmt.Sprintf("invalid time (%v)", v))
    } else {
        return t
    }
}
