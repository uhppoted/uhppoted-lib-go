// generated code - ** DO NOT EDIT **

package decode

import (
    "fmt"
    "net/netip"
    "testing"
    "time"
    "reflect"

   "github.com/uhppoted/uhppoted-lib-go/uhppoted/entities"
   "github.com/uhppoted/uhppoted-lib-go/uhppoted/responses"
)

{{ range $response := . }}{{ range $test := $response.Tests}}
func Test{{ titleCase $test.Name }}(t *testing.T) {
    packet := []byte{
{{ hex $test.Response }}
    }

    expected := responses.{{ titleCase $response.Message.Name }} {
{{ range $value := $test.Expected}}{{ titleCase $value.Name }}: {{ value $value.Value $value.Type }},
{{ end -}}
    }

    response,err := {{ titleCase $response.Message.Name }}(packet)

    if err != nil {
        t.Fatalf("%v",err)
    } else if !reflect.DeepEqual(response, expected) {
        t.Errorf("incorrectly decoded response:\n   expected: %#v\n   got:      %#v", expected,response)
    }
}
{{ end -}}
{{ end }}

func IPv4(v string) netip.Addr {
    return netip.MustParseAddr(v)
}

func addrport(v string) netip.AddrPort {
    return netip.MustParseAddrPort(v)
}

func string2datetime(v string) time.Time {
    if d,err := time.ParseInLocation("2006-01-02 15:04:05", v, time.Local); err != nil {
        panic(fmt.Sprintf("invalid datetime (%v)", v))
    } else {
        return d
    }
}

