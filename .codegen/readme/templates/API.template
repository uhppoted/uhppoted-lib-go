# API
- [`Listen`](#listen)
{{ range $func := .API }}
- [`{{ titleCase $func.Name }}`](#{{ clean $func.Name }}){{ end }}
- [`GetCardRecord`](#getcardrecord)
- [`GetCardRecordAtIndex`](#getcardrecordatindex)
- [`PutCardRecord`](#putcardrecord)
- [`Listen`](#listen)

---
Invoking an API function requires an instance of the `Uhppoted` struct initialised with the information required
to access a controller:

```
        u := lib.NewUhppoted(bind, broadcast, listen, debug)

where:

bind        IPv4 address to which to bind the UDP socket
broadcast   IPv4 address:port for broadcast UDP packets
listen      IPv4 address:port for events from controller
debug       Displays the controller requests/responses if true.
```

e.g.:
```
import (
    "fmt"
    "net/netip"

    lib "github.com/uhppoted/uhppoted-lib-go/uhppoted"
)

...
func main() {
    bind := netip.MustParseAddr("0.0.0.0")
    broadcast := netip.MustParseAddrPort("255.255.255.255:60000")
    listen := netip.MustParseAddrPort("0.0.0.0:60001")
    debug := true

    u := lib.NewUhppoted(bind, broadcast, listen, options.debug)
    
    if controller, err := lib.GetController(u, 405419896); err != nil {
        fmt.Printf("ERROR %v\n", err)
    } else {
        fmt.Printf("%v\n", controller)
    }
}
```

### Notes
1. All API functions return an error if the call fails for any reason whatsoever.
2. All API functions (other than `get_all_controllers` and `listen`) take a `controller` that may be either:
   - a _uint32_ controller serial number (legacy)
   - a Controller struct
```
type Controller struct {
    ID       uint32
    Address  netip.AddrPort
    Protocol string
}

where:
- ID        controller serial number
- Address   controller IPv4 address and port. 
            (optional - defaults to UDP broadcast if not provided)
- Protocol  either "udp" or "tcp". 
            (optional - defaults to "udp")
```
   e.g.:
```
   lib.GetController(u, 405419896, TIMEOUT)
   lib.GetController(u, lib.Controller{
                           405419896, 
                           netip.MustParseAddrPort('192.168.1.100:60000'), 
                           'tcp'}, TIMEOUT)
```

3. All API functions (other than `listen`) take a `timeout` parameter that sets the time limit for the request, 
   e.g.:
```
   GetController(u, 405419896, 750*time.Millisecond)
```

4. `datetime` args (e.g. `SetTime`) take a `TDateTime` type which may be either a time-zone free `entities.DateTime` or a 
Go stdlib `time.Time`:
```
    ...
    return lib.SetTime(u, c, time.Now(), options.timeout)
```
```
    ...
    return lib.SetTime(u, c, entities.DateTime(2025, 3, 25, 12, 34, 56), options.timeout)
```

A `DateTimeFromTime` helper function is provided which converts a stdlib `time.Time` to an `entities.DateTime`.


5. `date` args (e.g. `PutCard`) take a `TDate` type which may be either a time-zone free `entities.Date` or a 
Go stdlib `time.Time`:

A `DateFromTime` helper function is provided which converts a stdlib `time.Time` to an `entities.DateTime`.


## Functions
{{ range $func := .API }}
### `{{ titleCase $func.Name }}`
{{ range $text := $func.Description}}{{ $text }}
{{end -}}
```
{{ titleCase $func.Name }}(u{{range $arg := $func.Args}}, {{ $arg.Name}}{{end}}, timeout)

where:
- u             Uhppoted        Uhppoted struct initialised with the bind address, broadcast address, etc
{{- range $arg := $func.Args}}
- {{ rpad $arg.Name 12 }}  {{ rpad $arg.Type 14 }}  {{ $arg.Description }}{{end}}
- timeout       time.Duration   maximum time to wait for a response from a controller
```
Returns {{ article $func.Response.Name }} `{{ titleCase $func.Response.Name }}`:
```
type {{ titleCase $func.Response.Name }} struct { {{ range $field := $func.Response.Fields}}
  {{ rpad (titleCase $field.Name) 18 }}  {{ rpad $field.Type 18 }}  {{ rpad (printf "`json:%q`" $field.Tag) 23 }} // {{ $field.Description }}{{ end }}
}
```
{{ end }}
### `GetCardRecord`
Retrieves the card record for a given card number.
```
GetCardRecord(u, controller, card, timeout)

where:
- u             Uhppoted        Uhppoted struct initialised with the bind address, broadcast address, etc
- controller    controller      uint32|Controller controller serial number or {id, address, protocol} Controller struct
- card          uint32          card number
- timeout       time.Duration   maximum time to wait for a response from a controller
```
Returns a `Card` record:
```
type Card struct { 
  Card          uint32            `json:"card"`           // card number
  StartDate     Date              `json:"start-date"`     // 'valid from' date
  EndDate       Date              `json:"end-date"`       // 'valid until' date
  Permissions   map[uint8]uint8   `json:"permissions"`    // access permissions for doors 1-4
  PIN           uint32            `json:"PIN"`            // PIN code [0..999999] (0 for no PIN)
}
```

### `GetCardRecordAtIndex`
Retrieves the card record stored at a given index.
```
GetCardRecordAtIndex(u, controller, index, timeout)

where:
- u             Uhppoted        Uhppoted struct initialised with the bind address, broadcast address, etc
- controller    controller      uint32|Controller controller serial number or {id, address, protocol} Controller struct
- index         uint32          card record index
- timeout       time.Duration   maximum time to wait for a response from a controller
```
Returns a `Card` record:
```
type Card struct { 
  Card          uint32            `json:"card"`           // card number
  StartDate     Date              `json:"start-date"`     // 'valid from' date
  EndDate       Date              `json:"end-date"`       // 'valid until' date
  Permissions   map[uint8]uint8   `json:"permissions"`    // access permissions for doors 1-4
  PIN           uint32            `json:"PIN"`            // PIN code [0..999999] (0 for no PIN)
}
```

### `PutCardRecord`
Creates or updates a card record stored on an access controller.
```
PutCardRecord(u, controller, card, timeout)

where:
- u             Uhppoted        Uhppoted struct initialised with the bind address, broadcast address, etc
- controller    controller      uint32|Controller controller serial number or {id, address, protocol} Controller struct
- card          Card            card record to add/update
- timeout       time.Duration   maximum time to wait for a response from a controller

where a Card record is:

type Card struct { 
  Card          uint32            // card number
  StartDate     Date              // 'valid from' date
  EndDate       Date              // 'valid until' date
  Permissions   map[uint8]uint8   // access permissions for doors 1-4
  PIN           uint32            // PIN code [0..999999] (0 for no PIN)
}
```
Returns a `bool`, `true` if the card was added or updated, `false` otherwise.

### `GetEventRecord`
Retrieves the event record for the event at a given index.
```
GetEventRecord(u, controller, index, timeout)

where:
- u             Uhppoted        Uhppoted struct initialised with the bind address, broadcast address, etc
- controller    controller      uint32|Controller controller serial number or {id, address, protocol} Controller struct
- index          uint32         event index
- timeout       time.Duration   maximum time to wait for a response from a controller
```
Returns an `Event` record:
```
type Event struct { 
  Index          uint32             `json:"index"`       // event index
  EventType      uint8              `json:"event-type"`  // event type 
  AccessGranted  bool               `json:"granted"`     // true if the door was unlocked
  Door           uint8              `json:"door"`        // door no. ([1..4]) for card and door events
  Direction      uint8              `json:"direction"`   // direction (1:IN, 2:OUT) for card and door events
  Card           uint32             `json:"card"`        // card number (for card events)
  Timestamp      optional datetime  `json:"timestamp"`   // event timestamp
  Reason         uint8              `json:"reason"`      // reason code
}
```

### `Listen`
Listens for controller events sent via UDP to the designated listener host.
```
Listen(u, events chan ListenerEvent, errors chan error, interrupt chan os.Signal) error {

where:
- u          Uhppoted            Uhppoted struct initialised with the bind address, broadcast address, etc
- events     chan ListenerEvent  events channel
- errors     chan error          errors channel
- interrupt  chan os.Signal      interrupts channel
```

- received events are posted to the _events_ channel
- non-fatal errors are posted to the _errors_ channel
- signals posted on the interrupts channel cause the event listener to close and return

```
type ListenerEvent struct { 
  Controller          uint32        `json:"controller"`      // controller serial number
  SystemDate          Date          `json:"system-date"`     // controller system date, e.g. 2025-07-21
  SystemTime          Time          `json:"system-time"`     // controller system time, e.g. 13:25:47
  Door1Open           bool          `json:"door-1-open"`     // door 1 open sensor
  Door2Open           bool          `json:"door-2-open"`     // door 2 open sensor
  Door3Open           bool          `json:"door-3-open"`     // door 3 open sensor
  Door4Open           bool          `json:"door-4-open"`     // door 4 open sensor
  Door1Button         bool          `json:"door-1-button"`   // door 1 button pressed
  Door2Button         bool          `json:"door-2-button"`   // door 2 button pressed
  Door3Button         bool          `json:"door-3-button"`   // door 3 button pressed
  Door4Button         bool          `json:"door-4-button"`   // door 4 button pressed
  Relays              uint8         `json:"relays"`          // bitset of door unlock relay states
  Inputs              uint8         `json:"alarm-inputs"`    // bitset of alarm inputs
  SystemError         uint8         `json:"system-error"`    // system error code
  SpecialInfo         uint8         `json:"special-info"`    // absolutely no idea
  EventIndex          uint32        `json:"event-index"`     // last event index
  EventType           uint8         `json:"event-type"`      // last event type
  EventAccessGranted  bool          `json:"event-granted"`   // last event access granted
  EventDoor           uint8         `json:"event-door"`      // last event door
  EventDirection      uint8         `json:"event-direction"` // last event door direction (0: in, 1: out)
  EventCard           uint32        `json:"event-card"`      // last event card number
  EventTimestamp      DateTime      `json:"event-timestamp"` // last event timestamp
  EventReason         uint8         `json:"event-reason"`    // last event reason
  SequenceNo          uint32        `json:"sequence-no"`     // packet sequence number
}
```

