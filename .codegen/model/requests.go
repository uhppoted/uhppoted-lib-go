package model

import (
	"net/netip"

	lib "github.com/uhppoted/uhppoted-codegen/model"
)

var Requests = []Request{
	GetControllerRequest,
	SetIPv4Request,
	GetStatusRequest,
	GetTimeRequest,
	SetTimeRequest,
	GetListenerRequest,
	SetListenerRequest,
	GetDoorRequest,
	SetDoorRequest,
}

var GetControllerRequest = Request{
	Message: lib.Message{
		Name:    "get controller",
		MsgType: 0x94,
		Fields: []lib.Field{
			{"controller", "uint32", 4, "controller serial number"},
		},
	},
	Tests: []RequestTest{
		{
			Name: "get-all-controllers",
			Args: []Arg{
				Arg{Name: "controller", Type: "uint32", Value: uint32(0)},
			},
			Expected: []byte{
				0x17, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			Name: "get-controller",
			Args: []Arg{
				Arg{Name: "controller", Type: "uint32", Value: uint32(405419896)},
			},
			Expected: []byte{
				0x17, 0x94, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
	},
}

var SetIPv4Request = Request{
	Message: lib.Message{
		Name:    "set IPv4",
		MsgType: 0x96,
		Fields: []lib.Field{
			{"controller", "uint32", 4, "controller serial number"},
			{"address", "IPv4", 8, "controller IPv4 address"},
			{"netmask", "IPv4", 12, "controller IPv4 subnet mask"},
			{"gateway", "IPv4", 16, "controller IPv4 gateway address"},
			{"", "magic", 20, "'magic' word"},
		},
	},
	Tests: []RequestTest{
		{
			Name: "set-IPv4",
			Args: []Arg{
				Arg{Name: "controller", Type: "uint32", Value: uint32(405419896)},
				Arg{Name: "address", Type: "IPv4", Value: netip.MustParseAddr("192.168.1.125")},
				Arg{Name: "netmask", Type: "IPv4", Value: netip.MustParseAddr("255.255.255.0")},
				Arg{Name: "gateway", Type: "IPv4", Value: netip.MustParseAddr("192.168.1.1")},
			},
			Expected: []byte{
				0x17, 0x96, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x7d, 0xff, 0xff, 0xff, 0x00,
				0xc0, 0xa8, 0x01, 0x01, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
	},
}

var GetStatusRequest = Request{
	Message: lib.Message{
		Name:    "get status",
		MsgType: 0x20,
		Fields: []lib.Field{
			{"controller", "uint32", 4, "controller serial number"},
		},
	},
	Tests: []RequestTest{
		{
			Name: "get-status",
			Args: []Arg{
				Arg{Name: "controller", Type: "uint32", Value: uint32(405419896)},
			},
			Expected: []byte{
				0x17, 0x20, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
	},
}

var GetTimeRequest = Request{
	Message: lib.Message{
		Name:    "get time",
		MsgType: 0x32,
		Fields: []lib.Field{
			{"controller", "uint32", 4, "controller serial number"},
		},
	},
	Tests: []RequestTest{
		{
			Name: "get-time",
			Args: []Arg{
				Arg{Name: "controller", Type: "uint32", Value: uint32(405419896)},
			},
			Expected: []byte{
				0x17, 0x32, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
	},
}

var SetTimeRequest = Request{
	Message: lib.Message{
		Name:    "set time",
		MsgType: 0x30,
		Fields: []lib.Field{
			{"controller", "uint32", 4, "controller serial number"},
			{"datetime", "datetime", 8, "date/time"},
		},
	},
	Tests: []RequestTest{
		{
			Name: "set-time",
			Args: []Arg{
				Arg{Name: "controller", Type: "uint32", Value: uint32(405419896)},
				Arg{Name: "datetime", Type: "datetime", Value: "2024-11-04 12:34:56"},
			},
			Expected: []byte{
				0x17, 0x30, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x20, 0x24, 0x11, 0x04, 0x12, 0x34, 0x56, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
	},
}

var GetListenerRequest = Request{
	Message: lib.Message{
		Name:    "get listener",
		MsgType: 0x92,
		Fields: []lib.Field{
			{"controller", "uint32", 4, "controller serial number"},
		},
	},
	Tests: []RequestTest{
		{
			Name: "get-listener",
			Args: []Arg{
				Arg{Name: "controller", Type: "uint32", Value: uint32(405419896)},
			},
			Expected: []byte{
				0x17, 0x92, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
	},
}

var SetListenerRequest = Request{
	Message: lib.Message{
		Name:    "set listener",
		MsgType: 0x90,
		Fields: []lib.Field{
			{"controller", "uint32", 4, "controller serial number"},
			{"listener", "addrport", 8, "event listener IPv4 address:port"},
			{"interval", "uint8", 14, "auto-send interval (seconds)"},
		},
	},
	Tests: []RequestTest{
		{
			Name: "set-listener",
			Args: []Arg{
				Arg{Name: "controller", Type: "uint32", Value: uint32(405419896)},
				Arg{Name: "listener", Type: "addrport", Value: "192.168.1.100:60001"},
				Arg{Name: "interval", Type: "uint8", Value: 17},
			},
			Expected: []byte{
				0x17, 0x90, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0x61, 0xea, 0x11, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
	},
}

var GetDoorRequest = Request{
	Message: lib.Message{
		Name:    "get door",
		MsgType: 0x82,
		Fields: []lib.Field{
			{"controller", "uint32", 4, "controller serial number"},
			{"door", "uint8", 8, "door ID ([1..4])"},
		},
	},
	Tests: []RequestTest{
		{
			Name: "get-door",
			Args: []Arg{
				Arg{Name: "controller", Type: "uint32", Value: uint32(405419896)},
				Arg{Name: "door", Type: "uint8", Value: uint8(3)},
			},
			Expected: []byte{
				0x17, 0x82, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
	},
}

var SetDoorRequest = Request{
	Message: lib.Message{
		Name:    "set door",
		MsgType: 0x80,
		Fields: []lib.Field{
			{"controller", "uint32", 4, "controller serial number"},
			{"door", "uint8", 8, "door ID ([1..4])"},
			{"mode", "uint8", 9, "control mode (1:normally open, 2:normally closed, 3: controlled)"},
			{"delay", "uint8", 10, "unlock delay (seconds)"},
		},
	},
	Tests: []RequestTest{
		{
			Name: "set-door",
			Args: []Arg{
				Arg{Name: "controller", Type: "uint32", Value: uint32(405419896)},
				Arg{Name: "door", Type: "uint8", Value: uint8(3)},
				Arg{Name: "mode", Type: "uint8", Value: uint8(2)},
				Arg{Name: "delay", Type: "uint8", Value: uint8(17)},
			},
			Expected: []byte{
				0x17, 0x80, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x02, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
	},
}
