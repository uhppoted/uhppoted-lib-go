package model

import (
	"net/netip"

	"codegen/model/types"
)

var API = []Func{
	FindControllers,
	GetController,
	SetIPv4,
	GetTime,
	SetTime,
	GetListener,
	SetListener,
	GetDoor,
	SetDoor,
	SetDoorPasscodes,
	OpenDoor,
	GetStatus,
	GetCards,
	GetCard,
}

var FindControllers = Func{
	Name:        "find-controllers",
	Description: "FindControllers retrieves a list of all UHPPOTE controllers accessible on the local LAN.",
	Protocols:   []string{"broadcast"},
	Tests: []FuncTest{
		{
			Name: "find-controllers",
			Args: []types.Arg{},
			Request: []byte{
				0x17, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Replies: []Reply{
				Reply{
					Message: []byte{
						0x17, 0x94, 0x00, 0x00, 0x90, 0x53, 0xfb, 0x0b, 0xc0, 0xa8, 0x01, 0x65, 0xff, 0xff, 0xff, 0x00,
						0xc0, 0xa8, 0x01, 0x01, 0x52, 0xfd, 0xfc, 0x07, 0x21, 0x82, 0x06, 0x62, 0x20, 0x20, 0x01, 0x01,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
					Response: []types.Value{
						{"controller", "uint32", 405419896},
						{"ip address", "IPv4", "192.168.1.100"},
						{"subnet mask", "IPv4", "255.255.255.0"},
						{"gateway", "IPv4", "192.168.1.1"},
						{"MAC address", "MAC", "00:12:23:34:45:56"},
						{"version", "version", "v8.92"},
						{"date", "date", "2018-11-05"},
					},
				},
				Reply{
					Message: []byte{
						0x17, 0x94, 0x00, 0x00, 0x41, 0x78, 0x1e, 0x12, 0xc0, 0xa8, 0x01, 0x64, 0xff, 0xff, 0xff, 0x00,
						0xc0, 0xa8, 0x01, 0x01, 0x52, 0xfd, 0xfc, 0x07, 0x21, 0x82, 0x08, 0x92, 0x20, 0x19, 0x08, 0x15,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				Reply{
					Message: []byte{
						0x17, 0x94, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0xff, 0xff, 0xff, 0x00,
						0xc0, 0xa8, 0x01, 0x01, 0x00, 0x12, 0x23, 0x34, 0x45, 0x56, 0x08, 0x92, 0x20, 0x18, 0x11, 0x05,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
			},
		},
	},
}

var GetController = Func{
	Name:        "get-controller",
	Description: "GetController retrieves the system information from an access controller.",
	Request:     GetControllerRequest,
	Response:    GetControllerResponse,
	Protocols:   []string{"broadcast", "udp", "tcp"},

	Tests: []FuncTest{
		{
			Name: "get-controller",
			Args: []types.Arg{
				{Name: "controller", Type: "uint32", Value: uint32(405419896)},
			},
			Request: []byte{
				0x17, 0x94, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Replies: []Reply{
				Reply{
					Message: []byte{
						0x17, 0x94, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0xff, 0xff, 0xff, 0x00,
						0xc0, 0xa8, 0x01, 0x01, 0x00, 0x12, 0x23, 0x34, 0x45, 0x56, 0x08, 0x92, 0x20, 0x18, 0x11, 0x05,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
					Response: []types.Value{
						{"controller", "uint32", 405419896},
						{"ip address", "IPv4", "192.168.1.100"},
						{"subnet mask", "IPv4", "255.255.255.0"},
						{"gateway", "IPv4", "192.168.1.1"},
						{"MAC address", "MAC", "00:12:23:34:45:56"},
						{"version", "version", "v8.92"},
						{"date", "date", "2018-11-05"},
					},
				},
			},
		},
	},
}

// - address:    controller IPv4 address e.g. 192.168.1.100.
// - netmask:    controller IPv4 subnet mask e.g. 255.255.255.0.
// - gateway:    controller IPv4 gateway address e.g. 192.168.1.1.
var SetIPv4 = Func{
	Name:        "set-IPv4",
	Description: "SetIPv4 sets the controller IPv4 address, netmask and gateway address.",
	Request:     SetIPv4Request,
	Response:    SetIPv4Response,
	Protocols:   []string{"broadcast", "udp", "tcp"},

	Tests: []FuncTest{
		{
			Name: "set-IPv4",
			Args: []types.Arg{
				{Name: "controller", Type: "uint32", Value: uint32(405419896)},
				{Name: "address", Type: "IPv4", Value: netip.MustParseAddr("192.168.1.125")},
				{Name: "netmask", Type: "IPv4", Value: netip.MustParseAddr("255.255.255.0")},
				{Name: "gateway", Type: "IPv4", Value: netip.MustParseAddr("192.168.1.1")},
			},
			Request: []byte{
				0x17, 0x96, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x7d, 0xff, 0xff, 0xff, 0x00,
				0xc0, 0xa8, 0x01, 0x01, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Replies: []Reply{
				Reply{
					Message: []byte{
						0x17, 0x96, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
					Response: []types.Value{
						{"controller", "uint32", 405419896},
						{"ok", "bool", true},
					},
				},
			},
		},
	},
}

var GetTime = Func{
	Name:        "get-time",
	Description: "GetTime retrieves the access controller system date and time.",
	Request:     GetTimeRequest,
	Response:    GetTimeResponse,
	Protocols:   []string{"broadcast", "udp", "tcp"},

	Tests: []FuncTest{
		{
			Name: "get-time",
			Args: []types.Arg{
				{Name: "controller", Type: "uint32", Value: uint32(405419896)},
			},
			Request: []byte{
				0x17, 0x32, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Replies: []Reply{
				Reply{
					Message: []byte{
						0x17, 0x32, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x20, 0x24, 0x11, 0x01, 0x12, 0x34, 0x56, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
					Response: []types.Value{
						{"controller", "uint32", 405419896},
						{"date-time", "datetime", "2024-11-01 12:34:56"},
					},
				},
			},
		},
	},
}

var SetTime = Func{
	Name:        "set-time",
	Description: "SetTime sets the access controller system date and time.",
	Request:     SetTimeRequest,
	Response:    SetTimeResponse,
	Protocols:   []string{"broadcast", "udp", "tcp"},

	Tests: []FuncTest{
		{
			Name: "set-time",
			Args: []types.Arg{
				{Name: "controller", Type: "uint32", Value: uint32(405419896)},
				{Name: "datetime", Type: "datetime", Value: "2024-11-04 12:34:56"},
			},
			Request: []byte{
				0x17, 0x30, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x20, 0x24, 0x11, 0x04, 0x12, 0x34, 0x56, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Replies: []Reply{
				Reply{
					Message: []byte{
						0x17, 0x30, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x20, 0x24, 0x11, 0x01, 0x12, 0x34, 0x56, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
					Response: []types.Value{
						{"controller", "uint32", 405419896},
						{"date-time", "datetime", "2024-11-01 12:34:56"},
					},
				},
			},
		},
	},
}

var GetListener = Func{
	Name:        "get-listener",
	Description: "GetListener retrieves the access controller event listener IPv4 address:port and auto-send interval.",
	Request:     GetListenerRequest,
	Response:    GetListenerResponse,
	Protocols:   []string{"broadcast", "udp", "tcp"},

	Tests: []FuncTest{
		{
			Name: "get-listener",
			Args: []types.Arg{
				{Name: "controller", Type: "uint32", Value: uint32(405419896)},
			},
			Request: []byte{
				0x17, 0x92, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Replies: []Reply{
				Reply{
					Message: []byte{
						0x17, 0x92, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0x61, 0xea, 0x11, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
					Response: []types.Value{
						{
							Name:  "controller",
							Type:  "uint32",
							Value: 405419896,
						},
						{
							Name:  "address",
							Type:  "addrport",
							Value: "192.168.1.100:60001",
						},
						{
							Name:  "interval",
							Type:  "uint8",
							Value: "17",
						},
					},
				},
			},
		},
	},
}

// - listener: IPv4 address:port of host listening for controller events.
// - interval: status auto-send interval (seconds) for events (0 disables auto-send).
var SetListener = Func{
	Name:        "set-listener",
	Description: "SetListener sets the access controller event listener IPv4 address:port and auto-send interval.",
	Request:     SetListenerRequest,
	Response:    SetListenerResponse,
	Protocols:   []string{"broadcast", "udp", "tcp"},

	Tests: []FuncTest{
		{
			Name: "set-listener",
			Args: []types.Arg{
				{Name: "controller", Type: "uint32", Value: uint32(405419896)},
				{Name: "listener", Type: "addrport", Value: "192.168.1.100:60001"},
				{Name: "interval", Type: "uint8", Value: uint8(17)},
			},
			Request: []byte{
				0x17, 0x90, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0x61, 0xea, 0x11, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Replies: []Reply{
				Reply{
					Message: []byte{
						0x17, 0x90, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
					Response: []types.Value{
						{
							Name:  "controller",
							Type:  "uint32",
							Value: 405419896,
						},
						{
							Name:  "ok",
							Type:  "bool",
							Value: true,
						},
					},
				},
			},
		},
	},
}

var GetDoor = Func{
	Name:        "get-door",
	Description: "GetDoor retrieves the control mode and unlock delay time for an access controller door.",
	Request:     GetDoorRequest,
	Response:    GetDoorResponse,
	Protocols:   []string{"broadcast", "udp", "tcp"},

	Tests: []FuncTest{
		{
			Name: "get-door",
			Args: []types.Arg{
				{Name: "controller", Type: "uint32", Value: uint32(405419896)},
				{Name: "door", Type: "uint8", Value: uint8(3)},
			},
			Request: []byte{
				0x17, 0x82, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Replies: []Reply{
				Reply{
					Message: []byte{
						0x17, 0x82, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
					Response: []types.Value{
						{
							Name:  "controller",
							Type:  "uint32",
							Value: 405419896,
						},
						{
							Name:  "door",
							Type:  "uint8",
							Value: 3,
						},
						{
							Name:  "mode",
							Type:  "uint8",
							Value: 2,
						},
						{
							Name:  "delay",
							Type:  "uint8",
							Value: 7,
						},
					},
				},
			},
		},
	},
}

// The door parameter is the door ID ([1..4]) and the door control mode is one of the following:
// - 1: normally open
// - 2: normally closed
// - 3: controlled
//
// The unlock delay is in seconds.
// `,
var SetDoor = Func{
	Name:        "set-door",
	Description: "SetDoor sets the control mode and unlock delay time for an access controller door.",
	Request:     SetDoorRequest,
	Response:    SetDoorResponse,
	Protocols:   []string{"broadcast", "udp", "tcp"},

	Tests: []FuncTest{
		{
			Name: "set-door",
			Args: []types.Arg{
				{Name: "controller", Type: "uint32", Value: uint32(405419896)},
				{Name: "door", Type: "uint8", Value: uint8(3)},
				{Name: "mode", Type: "uint8", Value: uint8(2)},
				{Name: "delay", Type: "uint8", Value: uint8(17)},
			},
			Request: []byte{
				0x17, 0x80, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x02, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Replies: []Reply{
				Reply{
					Message: []byte{
						0x17, 0x80, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x02, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
					Response: []types.Value{
						{
							Name:  "controller",
							Type:  "uint32",
							Value: 405419896,
						},
						{
							Name:  "door",
							Type:  "uint8",
							Value: 3,
						},
						{
							Name:  "mode",
							Type:  "uint8",
							Value: 2,
						},
						{
							Name:  "delay",
							Type:  "uint8",
							Value: 17,
						},
					},
				},
			},
		},
	},
}

var SetDoorPasscodes = Func{
	Name:        "set-door-passcodes",
	Description: "Sets up to 4 passcodes for a controller door.",
	Request:     SetDoorPasscodesRequest,
	Response:    SetDoorPasscodesResponse,
	Protocols:   []string{"broadcast", "udp", "tcp"},

	Tests: []FuncTest{
		{
			Name: "set-door-passcodes",
			Args: []types.Arg{
				{Name: "controller", Type: "uint32", Value: uint32(405419896)},
				{Name: "door", Type: "uint8", Value: uint8(3)},
				{Name: "passcode1", Type: "uint32", Value: uint32(12345)},
				{Name: "passcode2", Type: "uint32", Value: uint32(54321)},
				{Name: "passcode3", Type: "uint32", Value: uint32(999999)},
				{Name: "passcode4", Type: "uint32", Value: uint32(0)},
			},
			Request: []byte{
				0x17, 0x8c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x39, 0x30, 0x00, 0x00,
				0x31, 0xd4, 0x00, 0x00, 0x3f, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Replies: []Reply{
				Reply{
					Message: []byte{
						0x17, 0x8c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
					Response: []types.Value{
						{
							Name:  "controller",
							Type:  "uint32",
							Value: 405419896,
						},
						{
							Name:  "ok",
							Type:  "bool",
							Value: true,
						},
					},
				},
			},
		},
	},
}

var OpenDoor = Func{
	Name:        "open-door",
	Description: "Unlocks a door controlled by an access controller.",
	Request:     OpenDoorRequest,
	Response:    OpenDoorResponse,
	Protocols:   []string{"broadcast", "udp", "tcp"},

	Tests: []FuncTest{
		{
			Name: "open-door",
			Args: []types.Arg{
				{Name: "controller", Type: "uint32", Value: uint32(405419896)},
				{Name: "door", Type: "uint8", Value: uint8(3)},
			},
			Request: []byte{
				0x17, 0x40, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Replies: []Reply{
				Reply{
					Message: []byte{
						0x17, 0x40, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
					Response: []types.Value{
						{
							Name:  "controller",
							Type:  "uint32",
							Value: 405419896,
						},
						{
							Name:  "ok",
							Type:  "bool",
							Value: true,
						},
					},
				},
			},
		},
	},
}

var GetStatus = Func{
	Name:        "get-status",
	Description: "GetStatus retrieves the system status from an access controller.",
	Request:     GetStatusRequest,
	Response:    GetStatusResponse,
	Protocols:   []string{"broadcast", "udp", "tcp"},

	Tests: []FuncTest{
		{
			Name: "get-status",
			Args: []types.Arg{
				{Name: "controller", Type: "uint32", Value: uint32(405419896)},
			},
			Request: []byte{
				0x17, 0x20, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Replies: []Reply{
				Reply{
					Message: []byte{
						0x17, 0x20, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x4e, 0x00, 0x00, 0x00, 0x02, 0x01, 0x03, 0x01,
						0xa1, 0x98, 0x7c, 0x00, 0x20, 0x22, 0x08, 0x23, 0x09, 0x47, 0x06, 0x2c, 0x00, 0x01, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x01, 0x03, 0x09, 0x49, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x27, 0x07, 0x09, 0x22, 0x08, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
					Response: []types.Value{
						{"controller", "uint32", 405419896},
						{"system-date", "date", "2022-08-23"},
						{"system-time", "time", "09:49:39"},
						{"door-1-open", "bool", false},
						{"door-2-open", "bool", true},
						{"door-3-open", "bool", false},
						{"door-4-open", "bool", false},
						{"door-1-button", "bool", false},
						{"door-2-button", "bool", false},
						{"door-3-button", "bool", false},
						{"door-4-button", "bool", true},
						{"relays", "uint8", 0x07},
						{"inputs", "uint8", 0x09},
						{"system-error", "uint8", 3},
						{"special-info", "uint8", 39},
						{"event-index", "uint32", 78},
						{"event-type", "uint8", 2},
						{"event-access-granted", "bool", true},
						{"event-door", "uint8", 3},
						{"event-direction", "uint8", 1},
						{"event-card", "uint32", 8165537},
						{"event-timestamp", "datetime", "2022-08-23 09:47:06"},
						{"event-reason", "uint8", 44},
						{"sequence-no", "uint32", 0},
					},
				},
			},
		},
	},
}

var GetCards = Func{
	Name:        "get-cards",
	Description: "Retrieves the number of cards stored on an access controller.",
	Request:     GetCardsRequest,
	Response:    GetCardsResponse,
	Protocols:   []string{"broadcast", "udp", "tcp"},

	Tests: []FuncTest{
		{
			Name: "get-cards",
			Args: []types.Arg{
				{Name: "controller", Type: "uint32", Value: uint32(405419896)},
			},
			Request: []byte{
				0x17, 0x58, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Replies: []Reply{
				Reply{
					Message: []byte{
						0x17, 0x58, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x0b, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
					Response: []types.Value{
						{
							Name:  "controller",
							Type:  "uint32",
							Value: 405419896,
						},
						{
							Name:  "cards",
							Type:  "uint32",
							Value: 13579,
						},
					},
				},
			},
		},
	},
}

var GetCard = Func{
	Name:        "get-card",
	Description: "Retrieves the card information for a card number from an access controller.",
	Request:     GetCardRequest,
	Response:    GetCardResponse,
	Protocols:   []string{"broadcast", "udp", "tcp"},

	Tests: []FuncTest{
		{
			Name: "get-card",
			Args: []types.Arg{
				{Name: "controller", Type: "uint32", Value: uint32(405419896)},
				{Name: "card", Type: "uint32", Value: uint32(10058400)},
			},
			Request: []byte{
				0x17, 0x5a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa0, 0x7a, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Replies: []Reply{
				Reply{
					Message: []byte{
						0x17, 0x5a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa0, 0x7a, 0x99, 0x00, 0x20, 0x25, 0x01, 0x01,
						0x20, 0x25, 0x12, 0x31, 0x01, 0x00, 0x11, 0x01, 0x6b, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
					Response: []types.Value{
						{
							Name:  "controller",
							Type:  "uint32",
							Value: 405419896,
						},
						{
							Name:  "card",
							Type:  "uint32",
							Value: 10058400,
						},
						{
							Name:  "start-date",
							Type:  "date",
							Value: "2025-01-01",
						},
						{
							Name:  "end-date",
							Type:  "date",
							Value: "2025-12-31",
						},
						{
							Name:  "door 1",
							Type:  "uint8",
							Value: 1,
						},
						{
							Name:  "door 2",
							Type:  "uint8",
							Value: 0,
						},
						{
							Name:  "door 3",
							Type:  "uint8",
							Value: 17,
						},
						{
							Name:  "door 4",
							Type:  "uint8",
							Value: 1,
						},
						{
							Name:  "PIN",
							Type:  "pin",
							Value: 7531,
						},
					},
				},
			},
		},
		{
			Name: "get-card-not-found",
			Args: []types.Arg{
				{Name: "controller", Type: "uint32", Value: uint32(405419896)},
				{Name: "card", Type: "uint32", Value: uint32(10058401)},
			},
			Request: []byte{
				0x17, 0x5a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa1, 0x7a, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Replies: []Reply{
				Reply{
					Message: []byte{
						0x17, 0x5a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
					Response: []types.Value{
						{
							Name:  "controller",
							Type:  "uint32",
							Value: 405419896,
						},
						{
							Name:  "card",
							Type:  "uint32",
							Value: 0,
						},
						{
							Name:  "start-date",
							Type:  "date",
							Value: "0001-01-01",
						},
						{
							Name:  "end-date",
							Type:  "date",
							Value: "0001-01-01",
						},
						{
							Name:  "door 1",
							Type:  "uint8",
							Value: 0,
						},
						{
							Name:  "door 2",
							Type:  "uint8",
							Value: 0,
						},
						{
							Name:  "door 3",
							Type:  "uint8",
							Value: 0,
						},
						{
							Name:  "door 4",
							Type:  "uint8",
							Value: 0,
						},
						{
							Name:  "PIN",
							Type:  "pin",
							Value: 0,
						},
					},
				},
			},
		},
	},
}
